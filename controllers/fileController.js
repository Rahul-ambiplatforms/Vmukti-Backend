// const fs = require("fs").promises;
// const path = require("path");

// // Upload a single file
// exports.uploadFile = async (req, res) => {
//   try {
//     if (!req.file) {
//       return res.status(400).json({
//         status: "error",
//         message: "No file uploaded",
//       });
//     }

//     // Return the filename that was generated by multer
//     res.status(200).json({
//       status: "success",
//       data: {
//         filename: req.file.filename,
//         originalname: req.file.originalname,
//         mimetype: req.file.mimetype,
//         size: req.file.size,
//       },
//     });
//   } catch (error) {
//     console.error("File upload error:", error);
//     res.status(400).json({
//       status: "error",
//       message: error.message,
//     });
//   }
// };

// // Delete a file
// exports.deleteFile = async (req, res) => {
//   try {
//     const filename = req.params.filename;
//     const filepath = path.join(__dirname, "../uploads", filename);

//     try {
//       await fs.access(filepath);
//     } catch (err) {
//       return res.status(404).json({
//         status: "error",
//         message: "File not found",
//       });
//     }
//     console.log("object before", filepath);
//     await fs.unlink(filepath);
//     console.log("object after", filepath);

//     res.status(200).json({
//       status: "success",
//       message: "File deleted successfully",
//     });
//   } catch (error) {
//     console.error("File deletion error:", error);
//     res.status(400).json({
//       status: "error",
//       message: error.message,
//     });
//   }
// };

const cloudinary = require("cloudinary").v2;
const multer = require("multer");
const { CloudinaryStorage } = require("multer-storage-cloudinary");
const path = require("path");

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

const storage = new CloudinaryStorage({
  cloudinary: cloudinary,
  params: {
    folder: "uploads",
    allowed_formats: ["jpg", "jpeg", "png", "gif", "mp4"],
  },
});

const parser = multer({ storage: storage }).single("file");

exports.uploadFile = (req, res) => {
  // console.log("This is the file controller", res);
  parser(req, res, (err) => {
    if (err) {
      console.error("File upload error:", err);
      return res.status(400).json({ status: "error", message: err.message });
    }
    if (!req.file) {
      return res
        .status(400)
        .json({ status: "error", message: "No file uploaded" });
    }
    console.log("SUCCESS! IMAGE UPLOADED TO CLOUDINARY:", req.file);
    const publicId = path.basename(req.file.filename);

    // 2. Get the extension from the original uploaded file's name
    const extension = path.extname(req.file.originalname);

    // 3. Combine them to create the final filename
    const finalname = publicId + extension;
    console.log("-----------IMAGE NAME----------", finalname);

    res.status(200).json({
      status: "success",
      data: {
        url: req.file.path,
        filename: finalname,
        mimetype: req.file.mimetype,
        // size: req.file.size,
      },
    });
  });
};


exports.deleteFile = async (req, res) => {
  try {
    const filenameWithExt = req.params.filename;
    
    const baseFilename = path.parse(filenameWithExt).name;
    
    const publicId = `uploads/${baseFilename}`;
    
    console.log(`Received request to delete: ${filenameWithExt}`);
    console.log(`Reconstructed Public ID for Cloudinary: ${publicId}`);

    const result = await cloudinary.uploader.destroy(publicId);

    console.log("Response from Cloudinary:", result);

    if (result.result !== "ok") {
      return res.status(404).json({
        status: "error",
        message: "File not found on Cloudinary. The public ID may be incorrect.",
        sentPublicId: publicId, 
      });
    }

    res.status(200).json({
      status: "success",
      message: "File deleted successfully",
    });
  } catch (error) {
    console.error("Error during file deletion:", error);
    res.status(500).json({ status: "error", message: error.message });
  }
};
